!function(){"use strict";class e{constructor(e,t="generic"){if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,this.team,"Character"==new.target.name)throw new Error("The Character class is a base class and can't be called with new")}}class t extends e{constructor(e){super(e,"bowman"),this.level=e,this.attack=25,this.defence=25}}class a extends e{constructor(e){super(e,"swordsman"),this.level=e,this.attack=40,this.defence=10}}class s extends e{constructor(e){super(e,"magician"),this.level=e,this.attack=20,this.defence=40}}class i extends e{constructor(e){super(e,"vampire"),this.level=e,this.attack=25,this.defence=25}}class r extends e{constructor(e){super(e,"undead"),this.level=e,this.attack=40,this.defence=10}}class l extends e{constructor(e){super(e,"daemon"),this.level=e,this.attack=10,this.defence=10}}class o{constructor(t,a,s="no"){if(!(t instanceof e))throw new Error("character must be instance of Character or its children");if("number"!=typeof a)throw new Error("position must be a number");t.position=a,this.character=t,this.position=a,this.status=s}}class n{constructor(e){this.characters=(()=>{let t=[];for(let a=0;a<e.length;a++)t.push(e[a]);return t})()}}class c{static from(e){return this.positionedCharacter=e,this.selectedCell=null,this.moveRange=null,this.attackRange=null,this.boardSize,null}}function*h(e,t,a){for(;;){let s=new(e[Math.floor(Math.random()*e.length)]);s.level=Math.floor(Math.random()*t+1),s.team=a,yield s}}function d(e,t,a,s){let i=[];for(let r=0;r<a;r++)i.push(h(e,t,s).next().value);return i}function u(e,t){return{move:{swordsman:4,undead:4,bowman:2,vampire:2,magician:1,daemon:1},attack:{swordsman:1,undead:1,bowman:2,vampire:2,magician:4,daemon:4}}[e][t]}function f(e=8){return{left:{positionLimits:C("left",e),team:[t,a,s]},right:{positionLimits:C("right",e),team:[i,r,l]}}}function m(e,t){if(t<3)throw new Error("Board size couldn't be less then 3 squares");e+=1,e=Number.parseInt(e);let a=[],s=[],i=[];const r=(t=Number.parseInt(t))**2;for(let e=1;e<=t-2;e++){a.push(t*e+1),s.push(t*(e+1));for(let a=2;a<=t-1;a++)i.push(t*e+a)}return 1===e?"top-left":e===t?"top-right":e===r?"bottom-right":e===r-t+1?"bottom-left":e>1&&e<t?"top":e>r-t+1&&e<r?"bottom":a.includes(e)?"left":s.includes(e)?"right":i.includes(e)?"center":void 0}function p(e){return Math.floor(Math.random()*e)}function C(e,t){let a=[];if("left"===e)for(let e=0;e<t;e++)a.push(e*t,e*t+1);else for(let e=0;e<t;e++)a.push(e*t+t-2,e*t+t-1);return a}function v(e,t,a){if(a>t-2)throw new Error("Distance can't be equal or only 2 squares less than the board size");let s=[],i=[];for(let e=0;e<=t**2;e+=t)i.push(e-1,e);for(let r of[-1,1])for(let l=1;l>-2;l--)for(let o=1;o<a+1;o++){let a=e+r*(t+l)*o;if(i.includes(e)&i.includes(a)&0!==l)break;if(!(a>=0&a<=t**2-1))break;if(s.push(a),i.includes(a)&0!==l)break}for(let r of[-1,1])for(let l=1;l<a+1;l++){let a=e+l*r;if(i.includes(e)&i.includes(a))break;if(!(a>=0&a<=t**2-1))break;if(s.push(a),i.includes(a))break}return s.push(e),s}function b(e,t,a){if(a>t-2)throw new Error("Distance can't be equal or only 2 squares less than the board size");let s=[],i=[];for(let e=0;e<=t**2;e+=t)i.push(e-1,e);for(let r=-a;r<a+1;r++)for(let l=0;l<=a;l++){let a=e+r*t+l;if(s.push(a),i.includes(a)&!i.includes(e))break;if(i.includes(a)&i.includes(s[s.length-2])){s.pop(),s.pop();break}}for(let r=-a;r<a+1;r++)for(let l=0;l>=-a;l--){let a=e+r*t+l;if(s.push(a),i.includes(a)&!i.includes(e))break;if(i.includes(a)&i.includes(s[s.length-2])){s.pop(),s.pop();break}}return s}function w(e){let t=[],a=[];for(let s of["left","right"]){const i=3,r=4,l=d(new n(f(e)[s].team).characters,i,r,s);if(r>2*e)throw new Error(`Number of characters can't be more then ${2*e} characters`);l.forEach((function(i){let r=p(e**2);for(;a.includes(r)||!f(e)[s].positionLimits.includes(r);)r=p(e**2);a.push(r);let l=new o(i,r);t.push(l)}))}c.positionedCharacter=t}function g(e){for(let t=0;t<c.positionedCharacter.length;t++)if(e===c.positionedCharacter[t].position&"dead"!=c.positionedCharacter[t].status)return[t,c.positionedCharacter[t]]}function L(){c.selectedCharacter=null,c.selectedCell=null,c.attackRange=null,c.moveRange=null}function k(){const e=[],t=[];for(let a of c.positionedCharacter)"left"===a.character.team&"dead"!=a.status?e.push(a):"right"===a.character.team&"dead"!=a.status&&t.push(a);for(let a of t){const t=b(a.position,c.boardSize,u("attack",a.character.type)),s=v(a.position,c.boardSize,u("attack",a.character.type)),i=c.positionedCharacter.findIndex((e=>e.position===a.position));for(let s of e)if(t.includes(s.position)&"dead"!=s.status){const e=a.character.attack,t=c.positionedCharacter[g(s.position)[0]].character.health,r=c.positionedCharacter[g(s.position)[0]].character.defence,l=Math.max(e-r,.1*e);t>l?c.positionedCharacter[g(s.position)[0]].character.health=t-l:c.positionedCharacter[g(s.position)[0]].status="dead",c.positionedCharacter[i].status="went";break}if("went"!=c.positionedCharacter[i].status){let e=s[[Math.floor(Math.random()*s.length)]];for(;g(e);)e=s[[Math.floor(Math.random()*s.length)]];c.positionedCharacter[i].position=e,c.positionedCharacter[i].status="went"}c.gamePlay.redrawPositions(c.positionedCharacter),S(),c.bot="off"}}function E(){for(let e of c.positionedCharacter)if(e.status="no",e.character.level>1&"left"===e.character.team)for(let t=1;t<e.character.level;t++){let t=e.character.attack,a=e.character.health;e.character.attack=Math.max(t,t*(80+a)/100),e.character.health=a>=20?100:a+80}else e.character.health=50}function y(){let e=[];for(let t of c.positionedCharacter){let a=p(c.boardSize**2);for(;e.includes(a)||!f(c.boardSize)[t.character.team].positionLimits.includes(a);)a=p(c.boardSize**2);e.push(a),t.position=a}}function G(e,t=!1){if("left"===e){const e=["prairie","desert","arctic","mountain"];let a=0;if(t||(a=e.indexOf(c.map)+1),a!==e.length){if(t)w(c.gamePlay.boardSize);else{for(let e of c.positionedCharacter)"dead"!=e.status?e.character.level=e.character.level+1:e.status="no";y()}E(),c.map=e[a],c.turn="left",c.bot="off",c.gamePlay.drawUi(c.map),c.gamePlay.redrawPositions(c.positionedCharacter)}else alert("GAME OVER"),c.over=!0,c.bot="off"}else{for(let e of c.positionedCharacter)e.status="no";y(),function(){for(let e of c.positionedCharacter)e.status="no",e.character.level>1?e.character.health=100:e.character.health=50}(),c.turn="left",c.bot="off",c.gamePlay.drawUi(c.map),c.gamePlay.redrawPositions(c.positionedCharacter)}}function S(){let e=0,t=0;for(let a of c.positionedCharacter)a.character.team===c.turn&"dead"!=a.status&&(t++,"went"===a.status&&e++);if(e===t){c.turn="left"===c.turn?"right":"left";for(let e of c.positionedCharacter)"went"===e.status&&(e.status="no")}}const P=new class{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const t=document.createElement("div");t.classList.add("cell","map-tile",`map-tile-${m(e,this.boardSize)}`),t.addEventListener("mouseenter",(e=>this.onCellEnter(e))),t.addEventListener("mouseleave",(e=>this.onCellLeave(e))),t.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(t)}this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const a of e)if("dead"!=a.status){const e=this.boardEl.children[a.position],s=document.createElement("div");s.classList.add("character",a.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=a.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${a.character.health}%`,i.appendChild(r),s.appendChild(i),e.appendChild(s)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(this,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(this,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(this,t)))}onNewGameClick(e){e.preventDefault(),this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e,t="yellow"){this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((a=>{const s=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),s.appendChild(i),i.addEventListener("animationend",(()=>{s.removeChild(i),a()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}};P.bindToDOM(document.querySelector("#game-container"));const M=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),z=new class{constructor(e,t){this.gamePlay=e,this.stateService=t,this.boardSize=e.boardSize}init(){c.map="prairie",c.turn="left",c.bot="off",c.boardSize=this.boardSize,c.gamePlay=this.gamePlay,c.stateService=this.stateService,this.gamePlay.drawUi(c.map),w(this.boardSize),E(),this.gamePlay.redrawPositions(c.positionedCharacter),this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.onCellClick),this.gamePlay.addNewGameListener(this.onNewGameClick),this.gamePlay.addSaveGameListener(this.onSaveGameClick),this.gamePlay.addLoadGameListener(this.onLoadGameClick)}onCellClick(e){if("left"===c.turn&!c.over){if(g(e)){const t=g(e)[0],a=g(e)[1];if("went"!=a.status)if(a.character.team===c.turn)null!=c.selectedCell&&this.deselectCell(c.selectedCell),this.selectCell(e),c.selectedCharacter=t,c.selectedCell=e,c.attackRange=b(e,this.boardSize,u("attack",a.character.type)),c.moveRange=v(e,this.boardSize,u("move",a.character.type));else if(null!=c.selectedCell&&c.attackRange.includes(e)){const t=c.positionedCharacter[c.selectedCharacter].character.attack,a=c.positionedCharacter[g(e)[0]].character.health,s=c.positionedCharacter[g(e)[0]].character.defence,i=Math.max(t-s,.1*t);a>i?c.positionedCharacter[g(e)[0]].character.health=a-i:c.positionedCharacter[g(e)[0]].status="dead",c.positionedCharacter[c.selectedCharacter].status="went",this.deselectCell(c.selectedCell),this.deselectCell(e),L(),this.showDamage(e,i).then((()=>{this.redrawPositions(c.positionedCharacter)})),S()}}else null!=c.selectedCell&&c.moveRange.includes(e)&&(c.positionedCharacter[c.selectedCharacter].position=e,c.positionedCharacter[c.selectedCharacter].status="went",this.deselectCell(c.selectedCell),this.redrawPositions(c.positionedCharacter),this.deselectCell(e),L(),S());!function(){const e=[],t=[];for(let a of c.positionedCharacter)"left"===a.character.team&"dead"!=a.status?t.push(a):"right"===a.character.team&"dead"!=a.status&&e.push(a);0===e.length&&G("left"),0===t.length&&G("right")}(),"right"===c.turn&"off"===c.bot&&(c.bot="on",setTimeout(k,1e3))}}onCellEnter(e){if(g(e)){g(e)[0];const t=g(e)[1].character,a=`🎖${t.level} ⚔${t.attack} 🛡${t.defence} ❤${t.health}`;this.showCellTooltip(a,e),this.setCursor("pointer")}null!=c.selectedCell&&(g(e)?g(e)[1].character.team!=c.turn&&(c.attackRange.includes(e)?(this.selectCell(e,"red"),this.setCursor("crosshair")):this.setCursor("not-allowed")):c.moveRange.includes(e)?(this.selectCell(e,"green"),this.setCursor("pointer")):this.setCursor("not-allowed"))}onCellLeave(e){this.hideCellTooltip(e),e!=c.selectedCell&&(this.deselectCell(e),this.setCursor("default"))}onNewGameClick(){"off"===c.bot&&G("left",!0)}onSaveGameClick(){if("off"===c.bot){const e={positionedCharacter:c.positionedCharacter,map:c.map};c.stateService.save(e)}}onLoadGameClick(){if("off"===c.bot){let e=c.stateService.load();c.positionedCharacter=e.positionedCharacter,c.map=e.map,c.gamePlay.drawUi(c.map),c.gamePlay.redrawPositions(c.positionedCharacter)}}}(P,M);z.init()}();